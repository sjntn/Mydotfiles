"-------------------------------------------------------------------------------
" コマンド       ノーマルモード 挿入モード コマンドラインモード ビジュアルモード
" map/noremap           @            -              -                  @
" nmap/nnoremap         @            -              -                  -
" imap/inoremap         -            @              -                  -
" cmap/cnoremap         -            -              @                  -
" vmap/vnoremap         -            -              -                  @
" map!/noremap!         -            @              @                  -
"---------------------------------------------------------------------------
syntax on
set nocompatible
set autoindent
set expandtab
set list
set number
set showmatch
set matchtime=1
set smartindent
set hidden
set wildmenu
set showcmd
set hlsearch
set ignorecase
set smartcase
set nostartofline
set ruler
set laststatus=2
set confirm
set visualbell
set t_vb=
set mouse=""
set cmdheight=2
set notimeout ttimeout ttimeoutlen=200
set listchars=tab:»-,trail:-,eol:↲
set t_Co=256
set backspace=indent,eol,start
set autoread
"set relativenumber
"set cursorline
" swapファイルを作成しない
set noswapfile
" タブ幅
set shiftwidth=4
set tabstop=4
" 全角スペースを視覚化
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=white
match ZenkakuSpace /　/
" noundofile
set noundofile

" スペースもマッピングされるためコメントは横に記述しません。
" nmap ノーマルモードのキーマップ
" nnoremap ノーマルモードのキーマップ (ただし再帰的にキーマップを追いません)
" imap インサートモードのキーマップ
"
"imap <C-h> <Left>
"imap <C-l> <Right>
"nnoremap j gj
"nnoremap k gk

"custom statusline
"set statusline=%<%f\
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}
set stl+=[%{&ff}]             " show fileformat
set stl+=%y%m%r%=
set stl+=%-14.(%l,%c%V%)\ %P

" scroll offset
set scrolloff=10

" http://itchyny.hatenablog.com/entry/2014/12/25/090000
set display=lastline

" jump to same indent line
"nn <C-k> :call search ("^". matchstr (getline (line (".")+ 1), '\(\s*\)') ."\\S", 'b')<CR>^
"nn <C-j> :call search ("^". matchstr (getline (line (".")), '\(\s*\)') ."\\S")<CR>^
nnoremap <silent> g{ :call <SID>search_top()<CR>^
nnoremap <silent> g} :call search ('^\s\{,' . (col('.') - 1). '}\S')<CR>^
function! s:search_top()
  let spaces = col('.')
  execute line(".") - 1
  call search ('^\s\{,' . (spaces - 1). '}\S', 'b')
endfunction

" Anywhere SID.
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()  "{{{
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i) " 1 -> 1, 2 -> 8, 3 -> 4 ????
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    " Use gettabvar().
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction "}}}
"let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2

" t: tags-and-searches "{{{
" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    t [Tag]
" Tab jump
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
"}}}

map <silent> [Tag]c :tablast <bar> tabnew<CR>
map <silent> [Tag]x :q<CR>
map <silent> [Tag]n :tabnext<CR>
map <silent> [Tag]p :tabprevious<CR>

" for non GVim
if !has('gui_running')
  " crusorline
  augroup vimrc-auto-cursorline
    autocmd!
    autocmd CursorMoved,CursorMovedI * call s:auto_cursorline('CursorMoved')
    autocmd CursorHold,CursorHoldI * call s:auto_cursorline('CursorHold')
    autocmd WinEnter * call s:auto_cursorline('WinEnter')
    autocmd WinLeave * call s:auto_cursorline('WinLeave')

    let s:cursorline_lock = 0
    function! s:auto_cursorline(event)
      if a:event ==# 'WinEnter'
        setlocal cursorline
        let s:cursorline_lock = 2
      elseif a:event ==# 'WinLeave'
        setlocal nocursorline
      elseif a:event ==# 'CursorMoved'
        if s:cursorline_lock
          if 1 < s:cursorline_lock
            let s:cursorline_lock = 1
          else
            setlocal nocursorline
            let s:cursorline_lock = 0
          endif
        endif
      elseif a:event ==# 'CursorHold'
        setlocal cursorline
        let s:cursorline_lock = 1
      endif
    endfunction
  augroup END
endif

" easy escape
"inoremap jj <ESC>
"onoremap jj <ESC>
"inoremap j<Space> j
"onoremap j<Space> j

" a>, i], etc... "{{{
" <angle>
onoremap aa  a>
xnoremap aa  a>
onoremap ia  i>
xnoremap ia  i>

" [rectangle]
onoremap ar  a]
xnoremap ar  a]
onoremap ir  i]
xnoremap ir  i]

" 'quote'
onoremap aq  a'
xnoremap aq  a'
onoremap iq  i'
xnoremap iq  i'

" "double quote"
onoremap ad  a"
xnoremap ad  a"
onoremap id  i"
xnoremap id  i"
"}}}

" Clear highlight.
nnoremap <ESC><ESC> :nohlsearch<CR>

" Command-line mode keymappings:"{{{
" <C-a>, A: move to head.
cnoremap <C-a>          <Home>
" <C-b>: previous char.
cnoremap <C-b>          <Left>
" <C-d>: delete char.
cnoremap <C-d>          <Del>
" <C-e>, E: move to end.
cnoremap <C-e>          <End>
" <C-f>: next char.
cnoremap <C-f>          <Right>
" <C-n>: next history.
cnoremap <C-n>          <Down>
" <C-p>: previous history.
cnoremap <C-p>          <Up>
" <C-k>, K: delete to end.
cnoremap <C-k> <C-\>e getcmdpos() == 1 ?
      \ '' : getcmdline()[:getcmdpos()-2]<CR>
" <C-y>: paste.
cnoremap <C-y>          <C-r>*
"}}}

" Command line buffer."{{{
nnoremap <SID>(command-line-enter) q:
xnoremap <SID>(command-line-enter) q:
nnoremap <SID>(command-line-norange) q:<C-u>

" [Space]: Other useful commands "{{{
" Smart space mapping.
" Notice: when starting other <Space> mappings in noremap, disappeared
" [Space].
nmap  <Space>   [Space]
xmap  <Space>   [Space]
nnoremap  [Space]   <Nop>
xnoremap  [Space]   <Nop>

" Toggle relativenumber.
nnoremap <silent> [Space].
      \ :<C-u>call ToggleOption('relativenumber')<CR>
nnoremap <silent> [Space]p
      \ :<C-u>call ToggleOption('paste')<CR>:set mouse=<CR>
" Toggle highlight.
nnoremap <silent> [Space]/
      \ :<C-u>call ToggleOption('hlsearch')<CR>
" Toggle cursorline.
nnoremap <silent> [Space]cl
      \ :<C-u>call ToggleOption('cursorline')<CR>
" Set autoread.
nnoremap [Space]ar
      \ :<C-u>setlocal autoread<CR>
" Output encoding information.
nnoremap <silent> [Space]en
      \ :<C-u>setlocal encoding? termencoding? fenc? fencs?<CR>
" Set spell check.
nnoremap [Space]sp
      \ :<C-u>call ToggleOption('spell')<CR>
nnoremap [Space]w
      \ :<C-u>update<CR>
"      \ :<C-u>call ToggleOption('wrap')<CR>
" Echo syntax name.
nnoremap [Space]sy
      \ :<C-u>echo synIDattr(synID(line('.'), col('.'), 1), "name")<CR>

" Easily edit .vimrc and .gvimrc "{{{
nnoremap <silent> [Space]ev  :<C-u>edit $MYVIMRC<CR>
nnoremap <silent> [Space]eg  :<C-u>edit $MYGVIMRC<CR>
" Load .gvimrc after .vimrc edited at GVim.
nnoremap <silent> [Space]rv :<C-u>source $MYVIMRC \|
      \ if has('gui_running') \|
      \   source $MYGVIMRC \|
      \ endif \| echo "source $MYVIMRC"<CR>
nnoremap <silent> [Space]rg
      \ :<C-u>source $MYGVIMRC \|
      \ echo "source $MYGVIMRC"<CR>
"}}}
" Easily syntax change.
"nnoremap <silent> [Space]ft :<C-u>Unite -start-insert filetype<CR>
" for folding
noremap [Space]j zj
noremap [Space]k zk
noremap [Space]h zc
noremap [Space]l zo
noremap [Space]i zMzv
noremap [Space]rr zR
noremap [Space]m zM
" VimShellPop
nnoremap <silent> [Space]; :<C-u>VimShellPop<CR>
" for vim-altr
nmap [Space]al <Plug>(altr-forward)

" Toggle options. "{{{
function! ToggleOption(option_name)
  execute 'setlocal' a:option_name.'!'
  execute 'setlocal' a:option_name.'?'
endfunction  "}}}
" Toggle variables. "{{{
function! ToggleVariable(variable_name)
  if eval(a:variable_name)
    execute 'let' a:variable_name.' = 0'
  else
    execute 'let' a:variable_name.' = 1'
  endif
  echo printf('%s = %s', a:variable_name, eval(a:variable_name))
endfunction  "}}}

" 戦闘力
function! Scouter(file, ...)
  let pat = '^\s*$\|^\s*"'
  let lines = readfile(a:file)
  if !a:0 || !a:1
    let lines = split(substitute(join(lines, "\n"), '\n\s*\\', '', 'g'), "\n")
  endif
  return len(filter(lines,'v:val !~ pat'))
endfunction
command! -bar -bang -nargs=? -complete=file Scouter
\        echo Scouter(empty(<q-args>) ? $MYVIMRC : expand(<q-args>), <bang>0)

"set re=1

filetype off

if has('vim_starting')
  set runtimepath+=~/.bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.bundle/'))
" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'
call neobundle#end()

NeoBundle 'tpope/vim-rails.git'
NeoBundleLazy 'mattn/emmet-vim', { 'autoload' : {
    \ 'filetypes' : ['eruby', 'scss', 'css', 'html', 'scss.css', 'jst', 'eco']
    \ }}
let g:user_emmet_leader_key='<C-S>'


NeoBundle 'EnhCommentify.vim'


"NeoBundle 'scrooloose/nerdtree'
"NeoBundle 'sudo.vim'
NeoBundle 'surround.vim'
"NeoBundle 'vim-ruby/vim-ruby'
"let ruby_space_errors=1
"let g:ruby_indent_access_modifier_style="indent"

NeoBundleLazy 'wadako111/vim-coffee-script', { 'autoload' : {
    \ 'filetypes' : ['coffee', 'eco']
    \ }}

" endを自動入力
NeoBundle 'tpope/vim-endwise.git'

NeoBundle 'othree/html5.vim'
NeoBundleLazy 'pangloss/vim-javascript', { 'autoload' : {
    \ 'filetypes' : 'javascript'
    \ }}

"NeoBundle 'nathanaelkane/vim-indent-guides.git'
"let g:indent_guides_auto_colors = 0
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=233
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=237
"let g:indent_guides_enable_on_vim_startup = 1
set ts=2 sw=2 et
NeoBundleLazy 'briancollins/vim-jst.git', { 'autoload': {
    \ 'filetypes' : ['eco', 'jst']
    \ }}
NeoBundle 'wadako111/say.vim'

" unite.vim
NeoBundle 'Shougo/unite.vim'
let g:unite_enable_start_insert = 1
let g:unite_enable_split_vertically = 0
let g:unite_winwidth = 40
let g:unite_source_file_mru_long_limit = 100
call unite#custom_source('file_rec', 'ignore_pattern', 'vendor/\|tmp/\|log/')
call unite#custom_source('file_rec/async', 'ignore_pattern', 'vendor/\|tmp/\|log/')
" バッファ一覧
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file file/new<CR>
nnoremap <silent> ,ut :<C-u>Unite -buffer-name=files buffer file_mru file_rec/async file/new  <CR>
nnoremap <silent> ,um :<C-u>Unite  file_mru <CR>
nnoremap <silent> ,ug :<C-u>Unite grep/git:. -no-quit<CR>
nnoremap <silent> ,urc :<C-u>Unite file_rec/async:app/controllers/ -input=!admin<CR><Space>
nnoremap <silent> ,urfc :<C-u>Unite file file/new -input=app/controllers/ <CR>
nnoremap <silent> ,urm :<C-u>Unite file_rec/async:app/models/ -input=!admin <CR><Space>
nnoremap <silent> ,urfm :<C-u>Unite file file/new -input=app/models/ <CR>
nnoremap <silent> ,urv :<C-u>Unite file_rec/async:app/views/ -input=!admin <CR><Space>
nnoremap <silent> ,urfv :<C-u>Unite file file/new -input=app/views/ <CR>
nnoremap <silent> ,urs :<C-u>Unite file_rec/async:app/assets/stylesheets/ <CR>
nnoremap <silent> ,urfs :<C-u>Unite file file/new -input=app/assets/stylesheets/ <CR>
nnoremap <silent> ,urj :<C-u>Unite file_rec/async:app/assets/javascripts/ <CR>
nnoremap <silent> ,urfj :<C-u>Unite file file/new -input=app/assets/javascripts/ <CR>
nnoremap <silent> ,uro :<C-u>Unite file_rec/async:config/ <CR>
nnoremap <silent> ,urfo :<C-u>Unite file file/new -input=config/ <CR>
nnoremap <silent> ,url :<C-u>Unite file_rec/async:lib/ <CR>
nnoremap <silent> ,urfl :<C-u>Unite file file/new -input=lib/ <CR>
nnoremap <silent> ,urr :<C-u>Unite file_rec/async:spec/ <CR>
nnoremap <silent> ,urfr :<C-u>Unite file file/new -input=spec/ <CR>
nnoremap <silent> ,urt :<C-u>Unite file_rec/async:app/tasks/ <CR>
nnoremap <silent> ,urft :<C-u>Unite file file/new -input=app/tasks/ <CR>
nnoremap <silent> ,ura :<C-u>Unite file_rec/async:app/apis/ <CR>
nnoremap <silent> ,urfa :<C-u>Unite file file/new -input=app/apis/ <CR>
nnoremap <silent> ,uru :<C-u>Unite file_rec/async:app/utils/ <CR>
nnoremap <silent> ,urfu :<C-u>Unite file file/new -input=app/utils/ <CR>
nnoremap <silent> ,urh :<C-u>Unite file_rec/async:chef/ <CR>
nnoremap <silent> ,urfh :<C-u>Unite file file/new -input=chef/ <CR>
autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
  imap <buffer> <C-y>     <Plug>(unite_narrowing_path)
  nmap <buffer> <C-y>     <Plug>(unite_narrowing_path)
  nmap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
  imap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
endfunction

"NeoBundle 'h1mesuke/unite-outline'

"NeoBundle 'Shougo/vimfiler'

" Most Recently Used files
NeoBundle "Shougo/neomru.vim"

" uniteでgit grep
" http://lambdalisue.hatenablog.com/entry/2014/11/06/055838
NeoBundleLazy 'lambdalisue/unite-grep-vcs', {
    \ 'autoload': {
    \    'unite_sources': ['grep/git', 'grep/hg'],
    \}}

NeoBundleLazy 'osyo-manga/unite-filetype', { 'autoload' : {
      \ 'unite_sources' : 'filetype',
      \ }}

" jazzradio
NeoBundleLazy 'supermomonga/jazzradio.vim', { 'depends' : [ 'Shougo/unite.vim' ] }
if neobundle#tap('jazzradio.vim')
  call neobundle#config({
        \   'autoload' : {
        \     'unite_sources' : [
        \       'jazzradio'
        \     ],
        \     'commands' : [
        \       'JazzradioUpdateChannels',
        \       'JazzradioStop',
        \       {
        \         'name' : 'JazzradioPlay',
        \         'complete' : 'customlist,jazzradio#channel_id_complete'
        \       }
        \     ],
        \     'function_prefix' : 'jazzradio'
        \   }
        \ })
endif


"""""""""""""""" unite.vim """""""""""""""""""

NeoBundle 'tpope/vim-fugitive'

"NeoBundle 'Shougo/vimshell'
"let g:vimshell_prompt_expr = 'getcwd()." > "'
"let g:vimshell_prompt_pattern = '^\f\+ > '
NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
    \ 'windows' : 'make -f make_mingw32.mak',
    \ 'cygwin' : 'make -f make_cygwin.mak',
    \ 'mac' : 'make -f make_mac.mak',
    \ 'unix' : 'make -f make_unix.mak',
  \ },
\ }

NeoBundle 'bling/vim-airline'
let g:airline_powerline_fonts = 1
" powerlineはタブラインにまで影響をおよぼすので使わない
"NeoBundle 'Lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim'}

"NeoBundle 'yuratomo/w3m.vim'

"NeoBundleLazy 'cakebaker/scss-syntax.vim', {'autoload' : {'filetypes' : ['scss', 'scss.css'] }}

"haskell
NeoBundleLazy "dag/vim2hs",                  {"autoload" : { "filetypes" : ["haskell"] }}
NeoBundleLazy "eagletmt/ghcmod-vim",         {"autoload" : { "filetypes" : ["haskell"] }}
NeoBundleLazy "eagletmt/unite-haddock",      {"autoload" : { "filetypes" : ["haskell"] }}
NeoBundleLazy "ujihisa/neco-ghc",            {"autoload" : { "filetypes" : ["haskell"] }}
NeoBundleLazy "ujihisa/unite-haskellimport", {"autoload" : { "filetypes" : ["haskell"] }}
autocmd BufWritePost *.hs GhcModCheckAndLintAsync

" textobj
" http://d.hatena.ne.jp/osyo-manga/20130717/1374069987
" textobj まとめ
NeoBundle 'kana/vim-textobj-user'
" snake_case 上の word
" a,w, i,w
NeoBundle 'h1mesuke/textobj-wiw'
NeoBundle 'rhysd/vim-textobj-ruby'
NeoBundle "kana/vim-textobj-indent"

let g:neosnippet#snippets_directory='~/vim_snippets'
NeoBundle 'Shougo/neosnippet'
NeoBundle "Shougo/neosnippet-snippets"
" <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" SuperTab like snippets behavior.
" imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
"imap <silent><C-S>     <Plug>(neosnippet_start_unite_snippet)

" twitter
"NeoBundle 'tyru/open-browser.vim'
"NeoBundle 'basyura/twibill.vim'
"NeoBundle 'basyura/TweetVim'
"nnoremap <leader>s :TweetVimCommandSay<CR>

NeoBundle 'mattn/webapi-vim'
NeoBundle 'mattn/livestyle-vim'
" color scheme
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'vim-scripts/twilight'
NeoBundle 'jonathanfilip/vim-lucius'
NeoBundle 'jonathanfilip/vim-lucius'
NeoBundle 'tomasr/molokai'
NeoBundle 'vim-scripts/rdark'
NeoBundle 'Zenburn'
NeoBundle 'desert.vim'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'Railscasts-Theme-GUIand256color'
colorscheme railscasts
set background=dark
"let g:solarized_termcolors=256
" jk
NeoBundleLazy 'rhysd/accelerated-jk', { 'autoload' : {
      \ 'mappings' : ['<Plug>(accelerated_jk_gj)',
      \               '<Plug>(accelerated_jk_gk)'],
      \ }}
if neobundle#is_installed('accelerated-jk')
  " accelerated-jk
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap gj j
  nmap <silent>k <Plug>(accelerated_jk_gk)
  nmap gk k
endif
let g:accelerated_jk_acceleration_limit = 300

"NeoBundle 'mattn/gist-vim'

NeoBundle 'scrooloose/syntastic'

NeoBundle 'LeafCage/foldCC'
set foldmethod=indent
set foldlevel=1
"set foldnestmax=2
set foldtext=FoldCCtext()
hi Folded gui=bold term=standout ctermbg=233 ctermfg=244
hi FoldColumn gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue

"NeoBundle 'SingleCompile'
"NeoBundleLazy 'thinca/vim-quickrun', { 'autoload' : {
"      \ 'mappings' : [
"      \   ['nxo', '<Plug>(quickrun)']],
"      \ }}
nmap <silent> <Leader>r <Plug>(quickrun)
let g:quickrun_config = {
  \ "_" : {
  \     "runner" : "vimproc",
  \     "runner/vimproc/updatetime" : 60
  \   },
  \ "coffee" : {
  \     "command" : "coffee",
  \     "exec" : ["%c -cbp %s"]
  \   }
  \ }

" for ios app
NeoBundleLazy 'tokorom/clang_complete',
      \ {'autoload': {'filetypes': ['c', 'cpp', 'objc']}}
NeoBundleLazy 'tokorom/clang_complete-getopts-ios.git',
      \ {'autoload': {'filetypes': ['objc']}}
NeoBundleLazy 'tokorom/cocoa.vim.git', 'syntax-only',
      \ {'autoload': {'filetypes': ['objc']}}
NeoBundle 'kana/vim-altr'

let g:clang_complete_auto = 0
let g:clang_auto_select = 0
let g:clang_auto_user_options = 'path, .clang_complete, ios'
let g:clang_complete_getopts_ios_sdk_directory = '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk'
"let g:clang_use_library = 0
let g:clang_library_path = '/Library/Developer/CommandLineTools/usr/lib'

NeoBundle 't9md/vim-quickhl'
"NeoBundle 'tyru/restart.vim'
"NeoBundle 'itchyny/calendar.vim'
"let g:calendar_google_calendar = 1
"let g:calendar_locale = "ja"
"let g:calendar_first_day = "monday"

NeoBundle 'thinca/vim-qfreplace'
NeoBundle 'chriskempson/vim-tomorrow-theme'
NeoBundle 'tpope/vim-repeat'


" neocomplete or neocomplcache
" neocompleteが使えるかどうか判定
function! s:meet_neocomplete_requirements()
    return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction

if s:meet_neocomplete_requirements()
  NeoBundle 'Shougo/neocomplete.vim'
  NeoBundleFetch 'Shougo/neocomplcache.vim'
else
  NeoBundleFetch 'Shougo/neocomplete.vim'
  NeoBundle 'Shougo/neocomplcache.vim'
endif


if s:meet_neocomplete_requirements()
  " neocomplete の設定
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#enable_ignore_case = 1
  " <C-e>: close popup.
  inoremap <expr><C-e>  pumvisible() ? neocomplete#cancel_popup() : "\<End>"
else
  " neocomplcache の設定
  let g:neocomplcache_enable_at_startup = 1
  "  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  "  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  "scssでcssの補完を有効にする
  if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
  endif
  let g:neocomplcache_omni_patterns.scss = '^\s\+\w\+\|\w\+[):;]\?\s\+\|[@!]'
  inoremap <expr><C-e> neocomplcache#cancel_popup()
  inoremap <expr><C-y> neocomplcache#close_popup()
endif

" php
NeoBundle "StanAngeloff/php.vim"
let php_sql_query = 1
let php_baselib = 1
let php_htmlInStrings = 1
let php_noShortTags = 1
let php_parent_error_close = 1

if has('gui_running')
"  NeoBundle 'todesking/ruby_hl_lvar.vim'
endif


filetype plugin indent on
filetype on
NeoBundleCheck